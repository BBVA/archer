/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.bbva.gateway.service.records;

import org.apache.avro.specific.SpecificData;

/**
 * Personal data of the user
 */
@org.apache.avro.specific.AvroGenerated
public class PersonalData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 1493172409439790256L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonalData\",\"namespace\":\"com.bbva.gateway.service.records\",\"doc\":\"Personal data of the user\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"First name of the user\",\"default\":null},{\"name\":\"firstLastname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"First family name of the user\",\"default\":null},{\"name\":\"secondLastname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Second family name of the user (not in all countries)\",\"default\":null},{\"name\":\"nationality\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Nationality of the user\",\"default\":null},{\"name\":\"identityDocument\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Identity document of the user\",\"default\":null},{\"name\":\"birthCountry\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Country of birth of the user\",\"default\":null},{\"name\":\"birthday\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Birth date of the user\",\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * First name of the user
     */
    @Deprecated
    public String name;
    /**
     * First family name of the user
     */
    @Deprecated
    public String firstLastname;
    /**
     * Second family name of the user (not in all countries)
     */
    @Deprecated
    public String secondLastname;
    /**
     * Nationality of the user
     */
    @Deprecated
    public String nationality;
    /**
     * Identity document of the user
     */
    @Deprecated
    public String identityDocument;
    /**
     * Country of birth of the user
     */
    @Deprecated
    public String birthCountry;
    /**
     * Birth date of the user
     */
    @Deprecated
    public String birthday;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public PersonalData() {
    }

    /**
     * All-args constructor.
     *
     * @param name             First name of the user
     * @param firstLastname    First family name of the user
     * @param secondLastname   Second family name of the user (not in all countries)
     * @param nationality      Nationality of the user
     * @param identityDocument Identity document of the user
     * @param birthCountry     Country of birth of the user
     * @param birthday         Birth date of the user
     */
    public PersonalData(final String name, final String firstLastname, final String secondLastname, final String nationality, final String identityDocument, final String birthCountry, final String birthday) {
        this.name = name;
        this.firstLastname = firstLastname;
        this.secondLastname = secondLastname;
        this.nationality = nationality;
        this.identityDocument = identityDocument;
        this.birthCountry = birthCountry;
        this.birthday = birthday;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(final int field$) {
        switch (field$) {
            case 0:
                return name;
            case 1:
                return firstLastname;
            case 2:
                return secondLastname;
            case 3:
                return nationality;
            case 4:
                return identityDocument;
            case 5:
                return birthCountry;
            case 6:
                return birthday;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    public void put(final int field$, final Object value$) {
        switch (field$) {
            case 0:
                name = (String) value$;
                break;
            case 1:
                firstLastname = (String) value$;
                break;
            case 2:
                secondLastname = (String) value$;
                break;
            case 3:
                nationality = (String) value$;
                break;
            case 4:
                identityDocument = (String) value$;
                break;
            case 5:
                birthCountry = (String) value$;
                break;
            case 6:
                birthday = (String) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'name' field.
     *
     * @return First name of the user
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the 'name' field.
     * First name of the user
     *
     * @param value the value to set.
     */
    public void setName(final String value) {
        name = value;
    }

    /**
     * Gets the value of the 'firstLastname' field.
     *
     * @return First family name of the user
     */
    public String getFirstLastname() {
        return firstLastname;
    }

    /**
     * Sets the value of the 'firstLastname' field.
     * First family name of the user
     *
     * @param value the value to set.
     */
    public void setFirstLastname(final String value) {
        firstLastname = value;
    }

    /**
     * Gets the value of the 'secondLastname' field.
     *
     * @return Second family name of the user (not in all countries)
     */
    public String getSecondLastname() {
        return secondLastname;
    }

    /**
     * Sets the value of the 'secondLastname' field.
     * Second family name of the user (not in all countries)
     *
     * @param value the value to set.
     */
    public void setSecondLastname(final String value) {
        secondLastname = value;
    }

    /**
     * Gets the value of the 'nationality' field.
     *
     * @return Nationality of the user
     */
    public String getNationality() {
        return nationality;
    }

    /**
     * Sets the value of the 'nationality' field.
     * Nationality of the user
     *
     * @param value the value to set.
     */
    public void setNationality(final String value) {
        nationality = value;
    }

    /**
     * Gets the value of the 'identityDocument' field.
     *
     * @return Identity document of the user
     */
    public String getIdentityDocument() {
        return identityDocument;
    }

    /**
     * Sets the value of the 'identityDocument' field.
     * Identity document of the user
     *
     * @param value the value to set.
     */
    public void setIdentityDocument(final String value) {
        identityDocument = value;
    }

    /**
     * Gets the value of the 'birthCountry' field.
     *
     * @return Country of birth of the user
     */
    public String getBirthCountry() {
        return birthCountry;
    }

    /**
     * Sets the value of the 'birthCountry' field.
     * Country of birth of the user
     *
     * @param value the value to set.
     */
    public void setBirthCountry(final String value) {
        birthCountry = value;
    }

    /**
     * Gets the value of the 'birthday' field.
     *
     * @return Birth date of the user
     */
    public String getBirthday() {
        return birthday;
    }

    /**
     * Sets the value of the 'birthday' field.
     * Birth date of the user
     *
     * @param value the value to set.
     */
    public void setBirthday(final String value) {
        birthday = value;
    }

    /**
     * Creates a new PersonalData RecordBuilder.
     *
     * @return A new PersonalData RecordBuilder
     */
    public static com.bbva.gateway.service.records.PersonalData.Builder newBuilder() {
        return new com.bbva.gateway.service.records.PersonalData.Builder();
    }

    /**
     * Creates a new PersonalData RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new PersonalData RecordBuilder
     */
    public static com.bbva.gateway.service.records.PersonalData.Builder newBuilder(final com.bbva.gateway.service.records.PersonalData.Builder other) {
        return new com.bbva.gateway.service.records.PersonalData.Builder(other);
    }

    /**
     * Creates a new PersonalData RecordBuilder by copying an existing PersonalData instance.
     *
     * @param other The existing instance to copy.
     * @return A new PersonalData RecordBuilder
     */
    public static com.bbva.gateway.service.records.PersonalData.Builder newBuilder(final com.bbva.gateway.service.records.PersonalData other) {
        return new com.bbva.gateway.service.records.PersonalData.Builder(other);
    }

    /**
     * RecordBuilder for PersonalData instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonalData>
            implements org.apache.avro.data.RecordBuilder<PersonalData> {

        /**
         * First name of the user
         */
        private String name;
        /**
         * First family name of the user
         */
        private String firstLastname;
        /**
         * Second family name of the user (not in all countries)
         */
        private String secondLastname;
        /**
         * Nationality of the user
         */
        private String nationality;
        /**
         * Identity document of the user
         */
        private String identityDocument;
        /**
         * Country of birth of the user
         */
        private String birthCountry;
        /**
         * Birth date of the user
         */
        private String birthday;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(final com.bbva.gateway.service.records.PersonalData.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.name)) {
                name = data().deepCopy(fields()[0].schema(), other.name);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.firstLastname)) {
                firstLastname = data().deepCopy(fields()[1].schema(), other.firstLastname);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.secondLastname)) {
                secondLastname = data().deepCopy(fields()[2].schema(), other.secondLastname);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.nationality)) {
                nationality = data().deepCopy(fields()[3].schema(), other.nationality);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.identityDocument)) {
                identityDocument = data().deepCopy(fields()[4].schema(), other.identityDocument);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.birthCountry)) {
                birthCountry = data().deepCopy(fields()[5].schema(), other.birthCountry);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.birthday)) {
                birthday = data().deepCopy(fields()[6].schema(), other.birthday);
                fieldSetFlags()[6] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing PersonalData instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(final com.bbva.gateway.service.records.PersonalData other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.name)) {
                name = data().deepCopy(fields()[0].schema(), other.name);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.firstLastname)) {
                firstLastname = data().deepCopy(fields()[1].schema(), other.firstLastname);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.secondLastname)) {
                secondLastname = data().deepCopy(fields()[2].schema(), other.secondLastname);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.nationality)) {
                nationality = data().deepCopy(fields()[3].schema(), other.nationality);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.identityDocument)) {
                identityDocument = data().deepCopy(fields()[4].schema(), other.identityDocument);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.birthCountry)) {
                birthCountry = data().deepCopy(fields()[5].schema(), other.birthCountry);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.birthday)) {
                birthday = data().deepCopy(fields()[6].schema(), other.birthday);
                fieldSetFlags()[6] = true;
            }
        }

        /**
         * Gets the value of the 'name' field.
         * First name of the user
         *
         * @return The value.
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the 'name' field.
         * First name of the user
         *
         * @param value The value of 'name'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setName(final String value) {
            validate(fields()[0], value);
            name = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'name' field has been set.
         * First name of the user
         *
         * @return True if the 'name' field has been set, false otherwise.
         */
        public boolean hasName() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'name' field.
         * First name of the user
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearName() {
            name = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'firstLastname' field.
         * First family name of the user
         *
         * @return The value.
         */
        public String getFirstLastname() {
            return firstLastname;
        }

        /**
         * Sets the value of the 'firstLastname' field.
         * First family name of the user
         *
         * @param value The value of 'firstLastname'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setFirstLastname(final String value) {
            validate(fields()[1], value);
            firstLastname = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'firstLastname' field has been set.
         * First family name of the user
         *
         * @return True if the 'firstLastname' field has been set, false otherwise.
         */
        public boolean hasFirstLastname() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'firstLastname' field.
         * First family name of the user
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearFirstLastname() {
            firstLastname = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'secondLastname' field.
         * Second family name of the user (not in all countries)
         *
         * @return The value.
         */
        public String getSecondLastname() {
            return secondLastname;
        }

        /**
         * Sets the value of the 'secondLastname' field.
         * Second family name of the user (not in all countries)
         *
         * @param value The value of 'secondLastname'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setSecondLastname(final String value) {
            validate(fields()[2], value);
            secondLastname = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'secondLastname' field has been set.
         * Second family name of the user (not in all countries)
         *
         * @return True if the 'secondLastname' field has been set, false otherwise.
         */
        public boolean hasSecondLastname() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'secondLastname' field.
         * Second family name of the user (not in all countries)
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearSecondLastname() {
            secondLastname = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'nationality' field.
         * Nationality of the user
         *
         * @return The value.
         */
        public String getNationality() {
            return nationality;
        }

        /**
         * Sets the value of the 'nationality' field.
         * Nationality of the user
         *
         * @param value The value of 'nationality'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setNationality(final String value) {
            validate(fields()[3], value);
            nationality = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'nationality' field has been set.
         * Nationality of the user
         *
         * @return True if the 'nationality' field has been set, false otherwise.
         */
        public boolean hasNationality() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'nationality' field.
         * Nationality of the user
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearNationality() {
            nationality = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'identityDocument' field.
         * Identity document of the user
         *
         * @return The value.
         */
        public String getIdentityDocument() {
            return identityDocument;
        }

        /**
         * Sets the value of the 'identityDocument' field.
         * Identity document of the user
         *
         * @param value The value of 'identityDocument'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setIdentityDocument(final String value) {
            validate(fields()[4], value);
            identityDocument = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'identityDocument' field has been set.
         * Identity document of the user
         *
         * @return True if the 'identityDocument' field has been set, false otherwise.
         */
        public boolean hasIdentityDocument() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'identityDocument' field.
         * Identity document of the user
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearIdentityDocument() {
            identityDocument = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'birthCountry' field.
         * Country of birth of the user
         *
         * @return The value.
         */
        public String getBirthCountry() {
            return birthCountry;
        }

        /**
         * Sets the value of the 'birthCountry' field.
         * Country of birth of the user
         *
         * @param value The value of 'birthCountry'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setBirthCountry(final String value) {
            validate(fields()[5], value);
            birthCountry = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'birthCountry' field has been set.
         * Country of birth of the user
         *
         * @return True if the 'birthCountry' field has been set, false otherwise.
         */
        public boolean hasBirthCountry() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'birthCountry' field.
         * Country of birth of the user
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearBirthCountry() {
            birthCountry = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'birthday' field.
         * Birth date of the user
         *
         * @return The value.
         */
        public String getBirthday() {
            return birthday;
        }

        /**
         * Sets the value of the 'birthday' field.
         * Birth date of the user
         *
         * @param value The value of 'birthday'.
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder setBirthday(final String value) {
            validate(fields()[6], value);
            birthday = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'birthday' field has been set.
         * Birth date of the user
         *
         * @return True if the 'birthday' field has been set, false otherwise.
         */
        public boolean hasBirthday() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'birthday' field.
         * Birth date of the user
         *
         * @return This builder.
         */
        public com.bbva.gateway.service.records.PersonalData.Builder clearBirthday() {
            birthday = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        @Override
        public PersonalData build() {
            try {
                final PersonalData record = new PersonalData();
                record.name = fieldSetFlags()[0] ? name : (String) defaultValue(fields()[0]);
                record.firstLastname = fieldSetFlags()[1] ? firstLastname : (String) defaultValue(fields()[1]);
                record.secondLastname = fieldSetFlags()[2] ? secondLastname : (String) defaultValue(fields()[2]);
                record.nationality = fieldSetFlags()[3] ? nationality : (String) defaultValue(fields()[3]);
                record.identityDocument = fieldSetFlags()[4] ? identityDocument : (String) defaultValue(fields()[4]);
                record.birthCountry = fieldSetFlags()[5] ? birthCountry : (String) defaultValue(fields()[5]);
                record.birthday = fieldSetFlags()[6] ? birthday : (String) defaultValue(fields()[6]);
                return record;
            } catch (final Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    private static final org.apache.avro.io.DatumWriter
            WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(final java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    private static final org.apache.avro.io.DatumReader
            READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

    @Override
    public void readExternal(final java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
